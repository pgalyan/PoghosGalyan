[{"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\index.js":"1","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\App.js":"2","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\reportWebVitals.js":"3","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\addTask\\AddNewTask.js":"4","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\Task\\Task.js":"5","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\ToDo\\ToDo.js":"6","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\AddTask\\AddNewTask.js":"7","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Helpers\\IdGen.js":"8","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\TaskDeleteConfirm\\TaskDeleteConfirm.js":"9","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\TaskModal\\TaskModal.js":"10","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Helpers\\date.js":"11","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\Navbar\\NavBar.js":"12","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\pages\\Contact\\Contact.js":"13","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\pages\\About\\About.js":"14","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\pages\\SingleTask\\SingleTask.js":"15","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\Preloader\\Preloader.js":"16","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\pages\\NotFound\\NotFound.js":"17","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\ContactForm\\ContactForm.jsx":"18","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Helpers\\validators.js":"19","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\ContactForm\\ContactFormHooks.jsx":"20"},{"size":717,"mtime":1615679539107,"results":"21","hashOfConfig":"22"},{"size":1106,"mtime":1616367658031,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":889,"mtime":1612986378319,"results":"25","hashOfConfig":"22"},{"size":1883,"mtime":1615709138241,"results":"26","hashOfConfig":"22"},{"size":10127,"mtime":1616506923762,"results":"27","hashOfConfig":"22"},{"size":2922,"mtime":1614884464150,"results":"28","hashOfConfig":"22"},{"size":105,"mtime":1613253931535,"results":"29","hashOfConfig":"22"},{"size":817,"mtime":1614882331871,"results":"30","hashOfConfig":"22"},{"size":3832,"mtime":1616358835009,"results":"31","hashOfConfig":"22"},{"size":101,"mtime":1615665566767,"results":"32","hashOfConfig":"22"},{"size":869,"mtime":1616366980140,"results":"33","hashOfConfig":"22"},{"size":427,"mtime":1616878966807,"results":"34","hashOfConfig":"22"},{"size":216,"mtime":1615680568741,"results":"35","hashOfConfig":"22"},{"size":4489,"mtime":1616370448625,"results":"36","hashOfConfig":"22"},{"size":241,"mtime":1616364477328,"results":"37","hashOfConfig":"22"},{"size":282,"mtime":1616369049652,"results":"38","hashOfConfig":"22"},{"size":5030,"mtime":1616854736313,"results":"39","hashOfConfig":"22"},{"size":957,"mtime":1616852819846,"results":"40","hashOfConfig":"22"},{"size":4714,"mtime":1616879322276,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1mc6cb4",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\index.js",[],["87","88"],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\App.js",[],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\reportWebVitals.js",[],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\addTask\\AddNewTask.js",[],["89","90"],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\Task\\Task.js",[],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\ToDo\\ToDo.js",[],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\AddTask\\AddNewTask.js",[],["91","92"],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Helpers\\IdGen.js",[],["93","94"],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\TaskDeleteConfirm\\TaskDeleteConfirm.js",[],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\TaskModal\\TaskModal.js",[],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Helpers\\date.js",[],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\Navbar\\NavBar.js",[],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\pages\\Contact\\Contact.js",["95"],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\pages\\About\\About.js",[],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\pages\\SingleTask\\SingleTask.js",[],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\Preloader\\Preloader.js",[],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\pages\\NotFound\\NotFound.js",[],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\ContactForm\\ContactForm.jsx",["96"],"import React from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport styles from './ContactForm.module.css'\r\nimport { withRouter } from 'react-router-dom';\r\nimport { isRequired, maxLength, minLength, emailValidation, isAllValid } from '../../Helpers/validators'\r\n\r\nconst inputsInfo = [\r\n    {\r\n        name: \"name\",\r\n        controlId: \"formBasicName\",\r\n        label: \"Name\",\r\n        type: \"text\",\r\n    },\r\n    {\r\n        name: \"email\",\r\n        controlId: \"formBasicEmail\",\r\n        label: \"Email\",\r\n        type: \"email\",\r\n    },\r\n    {\r\n        name: \"message\",\r\n        controlId: \"textareaForContactPage\",\r\n        label: \"Message\",\r\n        as: \"textarea\",\r\n        rows: 3,\r\n        maxLength: 100,\r\n    },\r\n\r\n]\r\n\r\nclass ContactForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            name: {\r\n                value: \"\",\r\n                valid: false,\r\n                error: \"\"\r\n            },\r\n            email: {\r\n                value: \"\",\r\n                valid: false,\r\n                error: \"\"\r\n            },\r\n            message: {\r\n                value: \"\",\r\n                valid: false,\r\n                error: \"\"\r\n            },\r\n\r\n            errorMessage: \"\",\r\n            \r\n        }\r\n    }\r\n\r\n    hendleChange = (event) => {\r\n        const { name, value } = event.target\r\n        let error = null\r\n        let valid = true\r\n        const maxLength16 = maxLength(16)\r\n        const minLength2 = minLength(2)\r\n        // if(isRequired(value)){\r\n        //     valid = false\r\n        //     error = isRequired(value)\r\n        // }else\r\n\r\n        // if(maxLength16(value)){\r\n        //     valid = false\r\n        //     error = maxLength16(value)\r\n        // }else\r\n\r\n        // if(minLength2(value)){\r\n        //     valid = false\r\n        //     error = minLength2(value)\r\n        // }\r\n\r\n\r\n        switch (name) {\r\n            case \"name\":\r\n            case \"email\":\r\n            case \"message\":\r\n                error = isRequired(value) ||\r\n                    (name === \"email\" && emailValidation(value)) ||\r\n                    minLength2(value) ||\r\n                    maxLength16(value);\r\n                break;\r\n            default: ;\r\n        }\r\n\r\n\r\n        this.setState({\r\n            [name]: {\r\n                value,\r\n                valid: !!!error,\r\n                error\r\n            },\r\n            isValid: isAllValid(this.state)\r\n        })\r\n\r\n    }\r\n\r\n\r\n    hendleSubmit = () => {\r\n        const contactData = { ...this.state }\r\n\r\n        delete contactData.errorMassage\r\n\r\n        for (let key in contactData) {\r\n            contactData[key] = contactData[key].value\r\n        }\r\n\r\n        fetch('http://localhost:3001/form', {\r\n            method: 'POST',\r\n            body: JSON.stringify(contactData),\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.error) {\r\n                    throw data.error\r\n                }\r\n                this.props.history.push(\"/\");\r\n            })\r\n            .catch(error => {\r\n                this.setState({\r\n                    errorMassage: error.massage\r\n                })\r\n\r\n                console.log(\"catch-error\", error)\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const {name, email, message, errorMessage} = this.state\r\n\r\n        const isValid = name.valid && email.valid && message.valid\r\n\r\n        const inputs = inputsInfo.map((item, index) => {\r\n            return (\r\n                <Form.Group\r\n                    controlId={item.controlId}\r\n                    key={index}\r\n                >\r\n                    <Form.Label>{item.label}</Form.Label>\r\n                    <Form.Control\r\n\r\n                        name={item.name}\r\n                        type={item.type}\r\n                        as={item.as}\r\n                        placeholder={item.label}\r\n                        onChange={this.hendleChange}\r\n                        value={this.state[item.name].value}\r\n\r\n                    />\r\n                    <Form.Text className={styles.text} > {this.state[item.name].error}</Form.Text>\r\n                </Form.Group>\r\n            )\r\n        })\r\n        return (\r\n            <div className={styles.form}>\r\n\r\n\r\n                <Form onSubmit={(e) => e.preventDefault()} >\r\n\r\n                    <p style={{ color: \"red\", textTransform: \"uppercase\" }}>\r\n                        {errorMessage}\r\n                    </p>\r\n\r\n                    {inputs}\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={this.hendleSubmit}\r\n                        disabled={!isValid}\r\n                    >\r\n                        Send massage\r\n                      </Button>\r\n                </Form>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default withRouter(ContactForm)\r\n\r\n\r\n\r\n","C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Helpers\\validators.js",[],"C:\\Users\\Poghos\\Desktop\\react\\poghosgalyan\\src\\Components\\ContactForm\\ContactFormHooks.jsx",["97","98"],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"99","replacedBy":"103"},{"ruleId":"101","replacedBy":"104"},{"ruleId":"99","replacedBy":"105"},{"ruleId":"101","replacedBy":"106"},{"ruleId":"99","replacedBy":"107"},{"ruleId":"101","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":2,"column":8,"nodeType":"111","messageId":"112","endLine":2,"endColumn":19},{"ruleId":"109","severity":1,"message":"113","line":59,"column":13,"nodeType":"111","messageId":"112","endLine":59,"endColumn":18},{"ruleId":"109","severity":1,"message":"114","line":5,"column":61,"nodeType":"111","messageId":"112","endLine":5,"endColumn":71},{"ruleId":"109","severity":1,"message":"113","line":55,"column":13,"nodeType":"111","messageId":"112","endLine":55,"endColumn":18},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],["115"],["116"],["115"],["116"],["115"],["116"],"no-unused-vars","'ContactForm' is defined but never used.","Identifier","unusedVar","'valid' is assigned a value but never used.","'isAllValid' is defined but never used.","no-global-assign","no-unsafe-negation"]